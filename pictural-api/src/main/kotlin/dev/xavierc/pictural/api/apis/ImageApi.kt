/**
 * Pictural API
 * This API is part of my project for the Shopify Developer intern challenge. This API manage the users, pictures and links between accounts of Pictural.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: chretienxavier42@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.xavierc.pictural.api.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.post
import io.ktor.routing.route

import dev.xavierc.pictural.api.Paths
import dev.xavierc.pictural.api.models.ImageInfo
import dev.xavierc.pictural.api.models.ImageListResponse
import dev.xavierc.pictural.api.repository.ImageRepository
import dev.xavierc.pictural.api.repository.UserRepository
import io.ktor.locations.*
import io.ktor.sessions.*
import org.kodein.di.instance
import org.kodein.di.ktor.di

@KtorExperimentalLocationsAPI
fun Route.ImageApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()
    val imageRepository by di().instance<ImageRepository>()
    val userRepository by di().instance<UserRepository>()

    post { request: Paths.ImageAccessAdd ->
        val userUuid = call.sessions.get("userUuid") as String?

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val imageInfo: ImageInfo? = imageRepository.getImageInfo(request.imageUuid)

            // Check if the image exist and the friend is a friend
            if (imageInfo == null) {
                call.respond(HttpStatusCode.NotFound)
            } else if (!userRepository.isFriend(userUuid, request.friendUuid) || imageInfo.ownerUuid != userUuid) {
                // 'Friend' is not a friend OR not the owner of the image
                call.respond(HttpStatusCode.Unauthorized)
            } else if (imageRepository.shareImageWith(request.imageUuid, request.friendUuid)) {
                call.respond(HttpStatusCode.OK)
            } else {
                // Something wrong happened
                call.respond(HttpStatusCode.InternalServerError)
            }
        }
    }

    delete { request: Paths.ImageAccessDelete ->
        val userUuid = call.sessions.get("userUuid") as String?

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val imageInfo: ImageInfo? = imageRepository.getImageInfo(request.imageUuid)

            // Check if the image exist and the friend is a friend
            when {
                imageInfo == null -> {
                    call.respond(HttpStatusCode.NotFound)
                }
                imageInfo.ownerUuid != userUuid -> {
                    // Not the owner of the image
                    call.respond(HttpStatusCode.Unauthorized)
                }
                imageRepository.deleteAccess(request.imageUuid, request.friendUuid) -> {
                    call.respond(HttpStatusCode.OK)
                }
                else -> {
                    // Something wrong happened
                    call.respond(HttpStatusCode.InternalServerError)
                }
            }
        }
    }

    delete { request: Paths.ImageDelete ->
        val userUuid = call.sessions.get("userUuid") as String?

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val imageInfo: ImageInfo? = imageRepository.getImageInfo(request.imageUuid)

            // Check if the image exist and the friend is a friend
            when {
                imageInfo == null -> {
                    call.respond(HttpStatusCode.NotFound)
                }
                imageInfo.ownerUuid != userUuid -> {
                    // 'Friend' is not a friend OR not the owner of the image
                    call.respond(HttpStatusCode.Unauthorized)
                }
                else -> {
                    imageRepository.deleteImageInfo(request.imageUuid)
                    // TODO Delete file
                    call.respond(HttpStatusCode.OK)
                }
            }
        }
    }

    get { request: Paths.ImageGet ->
        val userUuid = call.sessions.get("userUuid") as String?

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val imageInfo = imageRepository.getImageInfo(request.imageUuid)

            when {
                imageInfo == null -> call.respond(HttpStatusCode.NotFound)
                (!imageInfo.authorized.contains(userUuid) && imageInfo.ownerUuid != userUuid)  -> {
                    // Not the owner or one of the authorized users
                    call.respond(HttpStatusCode.Unauthorized)
                }
                else -> call.respond(HttpStatusCode.NotImplemented) // TODO download file
            }
        }
    }

    get { request: Paths.ImageInfoGet ->
        val userUuid = call.sessions.get("userUuid") as String?

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val imageInfo = imageRepository.getImageInfo(request.imageUuid)

            when {
                imageInfo == null -> call.respond(HttpStatusCode.NotFound)
                (!imageInfo.authorized.contains(userUuid) && imageInfo.ownerUuid != userUuid)  -> {
                    // Not the owner or one of the authorized users
                    call.respond(HttpStatusCode.Unauthorized)
                }
                else -> call.respond(HttpStatusCode.OK, imageInfo)
            }
        }
    }

    route("/image/upload") {
        post {
            val userUuid = call.sessions.get("userUuid") as String?

            if (userUuid == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }

    get { _: Paths.ImagesGet ->
        val userUuid = call.sessions.get("userUuid") as String?

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.OK, ImageListResponse(imageRepository.getImagesByUser(userUuid)))
        }
    }
}
