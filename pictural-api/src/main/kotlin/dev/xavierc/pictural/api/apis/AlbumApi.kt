/**
* Pictural API
* This API is part of my project for the Shopify Developer intern challenge. This API manage the users, pictures and links between accounts of Pictural.
*
* The version of the OpenAPI document: 0.1.0
* Contact: chretienxavier42@gmail.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dev.xavierc.pictural.api.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.delete
import io.ktor.locations.get
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.post
import io.ktor.routing.put
import io.ktor.routing.route

import dev.xavierc.pictural.api.Paths

@KtorExperimentalLocationsAPI
fun Route.AlbumApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    route("/album") {
            authenticate("google_oauth2") {
        post {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
            }
    }


    delete<Paths.AlbumDelete> { _: Paths.AlbumDelete ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }


    route("/album") {
            authenticate("google_oauth2") {
        put {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
            }
    }


    get<Paths.AlbumsGet> { _: Paths.AlbumsGet ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "albums" : [ {
                "images" : [ {
                  "ownerUuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "authorized" : [ "046b6c7f-0b8a-43b9-b35d-6489e6daee91", "046b6c7f-0b8a-43b9-b35d-6489e6daee91" ],
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "url" : "url"
                }, {
                  "ownerUuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "authorized" : [ "046b6c7f-0b8a-43b9-b35d-6489e6daee91", "046b6c7f-0b8a-43b9-b35d-6489e6daee91" ],
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "url" : "url"
                } ],
                "title" : "title",
                "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "friends" : [ {
                  "pictureUuid" : "pictureUuid",
                  "name" : "Xavier Chrétien",
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                }, {
                  "pictureUuid" : "pictureUuid",
                  "name" : "Xavier Chrétien",
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                } ]
              }, {
                "images" : [ {
                  "ownerUuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "authorized" : [ "046b6c7f-0b8a-43b9-b35d-6489e6daee91", "046b6c7f-0b8a-43b9-b35d-6489e6daee91" ],
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "url" : "url"
                }, {
                  "ownerUuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "authorized" : [ "046b6c7f-0b8a-43b9-b35d-6489e6daee91", "046b6c7f-0b8a-43b9-b35d-6489e6daee91" ],
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "url" : "url"
                } ],
                "title" : "title",
                "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                "friends" : [ {
                  "pictureUuid" : "pictureUuid",
                  "name" : "Xavier Chrétien",
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                }, {
                  "pictureUuid" : "pictureUuid",
                  "name" : "Xavier Chrétien",
                  "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                } ]
              } ]
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }

}
