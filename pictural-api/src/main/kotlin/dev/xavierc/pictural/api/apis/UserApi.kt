/**
 * Pictural API
 * This API is part of my project for the Shopify Developer intern challenge. This API manage the users, pictures and links between accounts of Pictural.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: chretienxavier42@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.xavierc.pictural.api.apis

import com.google.gson.Gson
import dev.xavierc.pictural.api.HTTP
import io.ktor.application.call
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.post
import io.ktor.routing.put
import io.ktor.routing.route

import dev.xavierc.pictural.api.Paths
import dev.xavierc.pictural.api.models.User
import dev.xavierc.pictural.api.models.UserPutRequest
import dev.xavierc.pictural.api.models.UserUpdateRequest
import dev.xavierc.pictural.api.repository.UserRepository


import io.ktor.client.request.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.sessions.*
import org.kodein.di.instance
import org.kodein.di.ktor.di

@KtorExperimentalLocationsAPI
fun Route.UserApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    val userRepository by di().instance<UserRepository>()

    delete { _: Paths.UserFriendsDelete ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()

        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }


    get { _: Paths.UserFriendsGet ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()

        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "friends" : [ {
                "pictureUuid" : "pictureUuid",
                "name" : "Xavier Chrétien",
                "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              }, {
                "pictureUuid" : "pictureUuid",
                "name" : "Xavier Chrétien",
                "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              } ]
            }"""

            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }


    route("/user/friends/{friendUuid}") {
        authenticate("google_oauth2") {
            post {
                val principal = call.authentication.principal<OAuthAccessTokenResponse>()

                if (principal == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                } else {
                    call.respond(HttpStatusCode.NotImplemented)
                }
            }
        }
    }


    get { _: Paths.UserInfoGet ->
        val userUuid: String? = call.sessions.get("userUuid") as String?

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val results = userRepository.getUserInfo("tet")
            if (results != null) {
                call.respond(results)
            } else {
                call.respond(HttpStatusCode.NotFound)
            }
        }
    }

    route("/user") {
        put {
            val userUuid: String? = call.sessions.get("userUuid") as String?

            if (userUuid == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val request = call.receive<UserUpdateRequest>()

                userRepository.updateUserInfo(userUuid, request.name, request.darkModeEnabled, request.pictureUuid)

                // Update the session
                call.sessions.set(userRepository.getUserInfo(userUuid))
                call.respond(HttpStatusCode.OK)
            }
        }

        post {
            val userUuid: String? = call.sessions.get("userUuid") as String?

            when {
                userUuid == null -> {
                    call.respond(HttpStatusCode.OK)
                }
                userRepository.getUserInfo(userUuid) != null -> {
                    // User already exists
                    call.respond(HttpStatusCode.Conflict)
                }
                else -> {
                    val request = call.receive<UserPutRequest>()

                    userRepository.addUserInfo(userUuid, request.name, request.pictureUuid)
                    call.respond(HttpStatusCode.Created)
                }
            }
        }
    }


    authenticate("google_oauth2") {
        post { _: Paths.UserLogin ->
            val principal = call.authentication.principal<OAuthAccessTokenResponse.OAuth2>() ?: error("No principal")

            val json = HTTP.client.get<Map<String, Any?>>("https://www.googleapis.com/userinfo/v2/me") {
                header("Authorization", "Bearer ${principal.accessToken}")
            }

            val id = json["id"] as String?

            if (id != null) {
                val results = userRepository.getUserInfo(id)
                if (results != null) {
                    call.sessions.set(results.uuid)
                    call.respond(HttpStatusCode.OK)
                } else {
                    call.sessions.set(id)
                    call.respond(HttpStatusCode.NotFound)
                }
            } else {
                call.respond(HttpStatusCode.BadRequest)
            }
        }
    }

    route("/user/logout") {
        post {
            call.sessions.clear("user")
            call.respond(HttpStatusCode.OK)
        }
    }
}
