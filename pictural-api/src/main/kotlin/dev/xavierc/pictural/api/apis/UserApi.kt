/**
 * Pictural API
 * This API is part of my project for the Shopify Developer intern challenge. This API manage the users, pictures and links between accounts of Pictural.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: chretienxavier42@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.xavierc.pictural.api.apis

import com.google.gson.Gson
import dev.xavierc.pictural.api.HTTP
import io.ktor.application.call
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.http.HttpStatusCode
import io.ktor.response.respond
import io.ktor.routing.Route
import io.ktor.routing.post
import io.ktor.routing.route

import dev.xavierc.pictural.api.Paths
import dev.xavierc.pictural.api.models.FriendsListResponse
import dev.xavierc.pictural.api.models.UserAddRequest
import dev.xavierc.pictural.api.models.UserUpdateRequest
import dev.xavierc.pictural.api.repository.UserRepository


import io.ktor.client.request.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.sessions.*
import org.kodein.di.instance
import org.kodein.di.ktor.di

@KtorExperimentalLocationsAPI
fun Route.UserApi() {

    val userRepository by di().instance<UserRepository>()

    // Get the friends list of the user
    get { _: Paths.UserFriendsGet ->
        val userUuid = call.sessions.get("userUuid") as String?
        call.response.headers.append("Access-Control-Allow-Origin", "*")

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val friendsList = userRepository.getFriendsList(userUuid)

            call.respond(HttpStatusCode.OK, FriendsListResponse(friendsList))
        }
    }

    // Add friend
    post { request: Paths.UserFriendsAdd ->
        val userUuid = call.sessions.get("userUuid") as String?
        call.response.headers.append("Access-Control-Allow-Origin", "*")

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            if (userRepository.addFriend(userUuid, request.friendUuid)) {
                call.respond(HttpStatusCode.OK)
            } else {
                call.respond(HttpStatusCode.NotFound)
            }
        }
    }

    // Delete a friend
    delete { request: Paths.UserFriendsDelete ->
        val userUuid = call.sessions.get("userUuid") as String?
        call.response.headers.append("Access-Control-Allow-Origin", "*")

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            if (userRepository.deleteFriend(userUuid, request.friendUuid)) {
                call.respond(HttpStatusCode.OK)
            } else {
                call.respond(HttpStatusCode.NotFound)
            }
        }
    }

    // Get user info
    get { _: Paths.UserInfoGet ->
        val userUuid = call.sessions.get("userUuid") as String?
        call.response.headers.append("Access-Control-Allow-Origin", "*")

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val results = userRepository.getUserInfo("tet")
            if (results != null) {
                call.respond(results)
            } else {
                call.respond(HttpStatusCode.NotFound)
            }
        }
    }

    // Update user info
    put { _: Paths.UserInfoUpdate ->
        val userUuid = call.sessions.get("userUuid") as String?
        call.response.headers.append("Access-Control-Allow-Origin", "*")

        if (userUuid == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val request = call.receive<UserUpdateRequest>()

            userRepository.updateUserInfo(userUuid, request.name, request.darkModeEnabled, request.pictureUuid)

            // Update the session
            call.sessions.set(userRepository.getUserInfo(userUuid))
            call.respond(HttpStatusCode.OK)
        }
    }

    // Add user info (create a new user)
    post { _: Paths.UserInfoAdd ->
        val userUuid = call.sessions.get("userUuid") as String?
        call.response.headers.append("Access-Control-Allow-Origin", "*")

        when {
            userUuid == null -> {
                call.respond(HttpStatusCode.OK)
            }
            userRepository.getUserInfo(userUuid) != null -> {
                // User already exists
                call.respond(HttpStatusCode.Conflict)
            }
            else -> {
                val request = call.receive<UserAddRequest>()

                userRepository.addUserInfo(userUuid, request.name, request.pictureUuid)
                call.respond(HttpStatusCode.Created)
            }
        }
    }

    // Login with oauth
    post { _: Paths.UserLogin ->
        val tokenId = call.receiveText()
        call.response.headers.append("Access-Control-Allow-Origin", "*")

        /// Validate the token
        val json = HTTP.client.get<Map<String, Any?>>("https://oauth2.googleapis.com/tokeninfo?id_token=${tokenId.substringAfter("=")}")

        val id = json["sub"] as String?

        if (id != null) {
            val results = userRepository.getUserInfo(id)
            if (results != null) {
                call.sessions.set(results.uuid)
                call.respond(HttpStatusCode.OK, results)
            } else {
                call.sessions.set(id)
                userRepository.addUserInfo(id, json["name"] as String, null)
                call.respond(HttpStatusCode.OK, userRepository.getUserInfo(id)!!)
            }
        } else {
            call.respond(HttpStatusCode.BadRequest)
        }
    }

    // Log out the user
    post { _: Paths.UserLogout ->
        call.sessions.clear("userUuid")
        call.response.headers.append("Access-Control-Allow-Origin", "*")
        call.respond(HttpStatusCode.OK)
    }
}
